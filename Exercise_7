import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, accuracy_score, classification_report
import numpy as np
import matplotlib.pyplot as plt

# Load data
data = pd.read_csv(r"C:\Users\PARIKRAMA GARGAV\Downloads\heartdiseasedataset.csv")

# Linear Regression for "chol" prediction
X_lr = data.drop(columns=['chol', 'target'])
y_lr = data['chol']

# Train-test split
X_train_lr, X_test_lr, y_train_lr, y_test_lr = train_test_split(X_lr, y_lr, test_size=0.2, random_state=42)

# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train_lr, y_train_lr)

# Predictions and Evaluation
y_pred_lr = lr_model.predict(X_test_lr)
lr_rmse = np.sqrt(mean_squared_error(y_test_lr, y_pred_lr))
print(f"Linear Regression RMSE: {lr_rmse}")

# Scatter plot for Linear Regression
plt.scatter(y_test_lr, y_pred_lr, alpha=0.5)
plt.plot([y_test_lr.min(), y_test_lr.max()], [y_test_lr.min(), y_test_lr.max()], color='red', lw=2)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Linear Regression: Actual vs Predicted")
plt.show()

# KNN Regression for "chol" prediction
knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_train_lr, y_train_lr)

# Predictions and Evaluation
y_pred_knn = knn_model.predict(X_test_lr)
knn_rmse = np.sqrt(mean_squared_error(y_test_lr, y_pred_knn))
print(f"KNN Regression RMSE: {knn_rmse}")

# Scatter plot for KNN Regression
plt.scatter(y_test_lr, y_pred_knn, alpha=0.5, color='orange')
plt.plot([y_test_lr.min(), y_test_lr.max()], [y_test_lr.min(), y_test_lr.max()], color='red', lw=2)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("KNN Regression: Actual vs Predicted")
plt.show()

# Logistic Regression for "target" prediction
X_logr = data.drop(columns=['target'])
y_logr = data['target']

# Train-test split
X_train_logr, X_test_logr, y_train_logr, y_test_logr = train_test_split(X_logr, y_logr, test_size=0.2, random_state=42)

# Logistic Regression
logr_model = LogisticRegression(max_iter=1000)
logr_model.fit(X_train_logr, y_train_logr)

# Predictions and Evaluation
y_pred_logr = logr_model.predict(X_test_logr)
logr_accuracy = accuracy_score(y_test_logr, y_pred_logr)
print(f"Logistic Regression Accuracy: {logr_accuracy}")
print("Logistic Regression Classification Report:\n", classification_report(y_test_logr, y_pred_logr))

# Scatter plot for Logistic Regression (Actual vs Predicted as Binary)
plt.scatter(y_test_logr, y_pred_logr, alpha=0.5, color='green')
plt.plot([y_test_logr.min(), y_test_logr.max()], [y_test_logr.min(), y_test_logr.max()], color='red', lw=2)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Logistic Regression: Actual vs Predicted")
plt.show()

